using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;

namespace SourceGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            List<ClassDeclarationSyntax> pktGeneratorsClasses = ((ControllerFinder)context.SyntaxReceiver)?.PacketsGenerators;
            ClassDeclarationSyntax singleClass = pktGeneratorsClasses.SingleOrDefault();
            var members = singleClass.DescendantNodes().OfType<MethodDeclarationSyntax>();


            var names = pktGeneratorsClasses.Select(classDeclarationSyntax =>
            {
                NamespaceDeclarationSyntax namespaceDeclarationSyntax = null;
                if (!SyntaxNodeHelper.TryGetParentSyntax(classDeclarationSyntax, out namespaceDeclarationSyntax))
                {
                    return "F*CK"; // or whatever you want to do in this scenario
                }

                var namespaceName = namespaceDeclarationSyntax.Name.ToString();
                return namespaceName + "." + classDeclarationSyntax.Identifier.ToString();
            });

            // Find the main method
            //var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            //var typeName = mainMethod.ContainingType.Name;

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

namespace PacketGen
{{
    public static  class LolClass
    {{
        public static string HelloFrom(string name) =>
            $""Generator says: Hi from number of funcs ({members.Count()})"";
    }}
}}
";

            // Add the source code to the compilation
            context.AddSource($"lols.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ControllerFinder());

        }
    }

    public class ControllerFinder : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> PacketsGenerators { get; }
            = new();
        public HashSet<string> All { get; }
            = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            All.Add(syntaxNode.GetType().Name);
            if (syntaxNode is ClassDeclarationSyntax controller)
            {
                if (controller.Identifier.ValueText.EndsWith("PacketsGenerator"))
                {
                    PacketsGenerators.Add(controller);
                }
            }
        }
    }

    static class SyntaxNodeHelper
    {
        public static bool TryGetParentSyntax<T>(SyntaxNode syntaxNode, out T result)
            where T : SyntaxNode
        {
            // set defaults
            result = null;

            if (syntaxNode == null)
            {
                return false;
            }

            try
            {
                syntaxNode = syntaxNode.Parent;

                if (syntaxNode == null)
                {
                    return false;
                }

                if (syntaxNode.GetType() == typeof(T))
                {
                    result = syntaxNode as T;
                    return true;
                }

                return TryGetParentSyntax<T>(syntaxNode, out result);
            }
            catch
            {
                return false;
            }
        }
    }
}