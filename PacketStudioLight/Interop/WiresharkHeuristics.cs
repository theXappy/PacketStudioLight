using System;
using System.Collections.Generic;
using System.Linq;

namespace PacketStudioLight
{
    public static class WiresharkHeuristics
    {

        // GREP'd using this regex:
        // (?:heur_dissector_add\(.*?,.*?,.*?,.*?"(.*?)".*?,)
        // Allow . to match newlines!
        // GREP path: wirehsark\epan\ and subdirs
        //
        // It's not perfect and some were added\remove manually
        // list dates around late 2018

        public static List<string> List = new List<string>
        {
            // ReSharper disable StringLiteralTypo
            "btsnoop_wtap",
            "elf_wtap",
            "gif_http",
            "gif_wtap",
            "jfif_http",
            "jfif_wtap",
            "pcap_wtap",
            "pcapng_wtap",
            "png_http",
            "png_wtap",
            "rfc7468_wtap",
            "njack_udp",
            "njack_tcp",
            "6lowpan_wlan",
            "acn_udp",
            "adwin_config_udp",
            "adwin_config_tcp",
            "aeron_udp",
            "aim_tls",
            "applemidi_udp",
            "ar_drone_udp",
            "artnet_udp",
            "at_usb_bulk",
            "at_usb_control",
            "atn-cm-ulcs",
            "atn-cpdlc-ulcs",
            "atn-ucls_cotp",
            "bfcp_tcp",
            "bfcp_udp",
            "bitcoin_tcp",
            "bittorrent_tcp",
            "bssap_sccp",
            "bssap_sua",
            "bittorrent_dht_udp",
            "bt_utp_udp",
            "caneth_udp",
            "carp_ip",
            "cattp_udp",
            "ceph_tcp",
            "cigi_udp",
            "cimd_tcp",
            "cco_cip",
            "s_validator_cip",
            "classicstun_udp",
            "classicstun_tcp",
            "clique_rm_udp",
            "credssp_tls",
            "ctdb_tcp",
            "dcc_udp",
            "dcerpc_tcp",
            "dcerpc_netbios",
            "dcerpc_udp",
            "dcerpc_smb_transact",
            "dcerpc_smb2",
            "dcerpc_http",
            "dicom_tcp",
            "dcp_etsi_udp",
            "packetcable_mta_dhcp",
            "packetcable_cm_dhcp",
            "apple_bsdp_dhcp",
            "alcatel_lucent_dhcp",
            "pxeclient_dhcp",
            "cablelabs_dhcp",
            "aruba_ap_dhcp",
            "aruba_instant_ap_dhcp",
            "apple_bsdp_info_dhcp",
            "dnp3_tcp",
            "dnp3_udp",
            "dplay_udp",
            "dplay_tcp",
            "drda_tcp",
            "dtls_udp",
            "dvb_s2_udp",
            "e100_udp",
            "etch_tcp",
            "exablaze_eth",
            "f5ethtrailer",
            "f5fileinfo",
            "fb_zero",
            "fcip_tcp",
            "fc_infiniband",
            "fix_tcp",
            "fix_tls",
            "fmtp_tcp",
            "fp_mux_udp",
            "giop_tcp",
            "giop_udp",
            "gmhdr_eth",
            "gmtrailer_eth",
            "gquic",
            "gsm_r_uus1",
            "gvsp_udp",
            "hi_cotp",
            "hi_cotp_is",
            "hi_tcp",
            "hislip_tcp",
            "hl7_tcp",
            "http_tcp",
            "http2_tls",
            "http2_tcp",
            "icep_tcp",
            "icep_udp",
            "ifcp_tcp",
            "mellanox_eoib",
            "eth_over_ib",
            "sdp_infiniband",
            "sdp_ib_private",
            "interlink_udp",
            "ip_tipc",
            "ip_zbee_zcl_se.tun",
            "ipsec_tcp",
            "iscsi_tcp",
            "iser_infiniband",
            "iser_ib_private",
            "usb_bulk_isi",
            "iwarp_mpa_tcp",
            "ixiatrailer_eth",
            "json_hpfeeds",
            "json_db_lsp",
            "jxta_udp",
            "jxta_tcp",
            "jxta_sctp",
            "lanforge_udp",
            "lanforge_tcp",
            "lbmpdm_tcp",
            "lbmr_udp",
            "lbtrm_udp",
            "lbtru_udp",
            "lbttcp_tcp",
            "lnet_ib",
            "lnet_ib_cm_private",
            "lsd_udp",
            "lwm_wlan",
            "mac_lte_udp",
            "mac_nr_udp",
            "mbim_usb_bulk",
            "mcpe_raknet",
            "metamako_eth",
            "miop_udp",
            "mms_cotp",
            "mms_cotp_is",
            "mmse_wsp",
            "mndp_udp",
            "mojito_udp",
            "mp2t_udp",
            "mp2t_usb_bulk",
            "mpeg_audio",
            "mpeg_pes",
            "mq_tcp",
            "mq_netbios",
            "mq_http",
            "mq_tls",
            "mqpcf_mq",
            "msrp_tcp",
            "smb1_wsp",
            "smb2_wsp",
            "nano-udp",
            "nano-tcp",
            "nas_eps_udp",
            "nbap_sctp",
            "nbd_tcp",
            "ndmp_tcp",
            "nsrpc",
            "ntlmssp_credssp",
            "nvme_rdma_cm_private",
            "nvme_rdma",
            "openflow_tcp",
            "opensafety_epl_data",
            "opensafety_sercosiii",
            "opensafety_pn_io",
            "openwire_tcp",
            "osc_udp",
            "ouch_soupbintcp",
            "paltalk_tcp",
            "pana_udp",
            "pathport_udp",
            "pdcp_lte_udp",
            "pdcp_nr_udp",
            "peekremote_udp",
            "pktgen_udp",
            "ppp_usb_bulk",
            "proxy_tcp",
            "proxy_udp",
            "pvfs_tcp",
            "q931_tcp",
            "quic",
            "raknet_udp",
            "ranap_sccp",
            "ranap_sua",
            "rdp_cr",
            "rdp_cc",
            "redbackli_udp",
            "reload_udp",
            "reload_tcp",
            "reload_framing_udp",
            "reload_framing_tcp",
            "reload_framing_dtls",
            "rftap",
            "rlc_lte_udp",
            "rlc_nr_udp",
            "rlm_udp",
            "rmt_norm_udp",
            "rnsap_sccp",
            "rpc_tcp",
            "rpc_udp",
            "rpcrdma_infiniband",
            "rpcrdma_iwarp",
            "rtcp_udp",
            "rtcp_stun",
            "rtitcp",
            "rtmpt_tcp",
            "rtp_udp",
            "rtp_stun",
            "rtp_rtsp",
            "rtps_rtitcp",
            "rtps_udp",
            "rtps_tcp",
            "rtcp",
            "s7comm_cotp",
            "s7comm_cotp_is",
            "ses_cotp",
            "ses_cotp_is",
            "clses_cotp",
            "sip_udp",
            "sip_tcp",
            "sip_sctp",
            "sip_stun",
            "skype_udp",
            "smb_netbios",
            "smb_smb_direct",
            "smb_cotp",
            "smb_vines",
            "smb2_netbios",
            "smb2_smb_direct",
            "smb_direct_iwarp",
            "smb_direct_infiniband",
            "smcr_tcp",
            "smcr_infiniband",
            "smpp_tcp",
            "smpp_x25",
            "spdy_tcp",
            "spice_tcp",
            "sprt_udp",
            "srt_udp",
            "starteam_tcp",
            "stt_ip",
            "stun_udp",
            "t124_t125",
            "t125_cotp",
            "t125_cotp_is",
            "tali_tcp",
            "tapa_ip",
            "TCPROS_tcp",
            "tds_tcp",
            "teredo_udp",
            "tfp_usb_bulk",
            "tftp_stun",
            "thread_wlan_beacon",
            "thrift_tcp",
            "tls_tcp",
            "tte_eth",
            "turnchannel_stun",
            "tuxedo_tcp",
            "u3v",
            "ucp_tcp",
            "udt_udp",
            "udt_dtls",
            "fp_udp",
            "fp_fp_mux",
            "rlc_udp",
            "ms_usb_bulk",
            "vnc_tcp",
            "vssmonitoring_eth",
            "wassp_udp",
            "waveagent_udp",
            "wg",
            "wol_udp",
            "xcsl_tcp",
            "xmcp_tcp",
            "xml_http",
            "xml_sip",
            "xml_media",
            "xml_tcp",
            "xml_udp",
            "xml_wtap",
            "yhoo_tcp",
            "ymsg_tcp",
            "zbee_wlan_beacon",
            "zbip_wlan_beacon",
            "zbee_nwk_wlan",
            "zbee_nwk_gp_wlan",
            "ziop_tcp",
            "esl_eth",
            "pn_io_pn_rt",
            "pn_cba_pn_rt",
            "pn_dcp_pn_rt",
            "pn_mrrt_pn_rt",
            "pn_ptcp_pn_rt",
            "pn_csf_sdu_pn_rt",
            "pn_frag_pn_rt",
            "hdcp2_tcp",
            "mq_ssl",
            "http2_ssl",
            "fix_ssl",
            "credssp_ssl",
            "aim_ssl",
            // ReSharper restore StringLiteralTypo
        };

        private static Dictionary<string, string> _noPuncHeurDict = null;

        private static Dictionary<Predicate<TSharkHeuristicProtocolEntry>,Action<TSharkHeuristicProtocolEntry>> _knownCarryingPitfalls = new Dictionary<Predicate<TSharkHeuristicProtocolEntry>, Action<TSharkHeuristicProtocolEntry>>()
        {
            // ReSharper disable StringLiteralTypo
            {entry => entry.CarryingProto == "cotp_cc",entry => entry.CarryingProto = "cc"},
            {entry => entry.CarryingProto == "cotp_cr",entry => entry.CarryingProto = "cr"},
            {entry => entry.CarryingProto == "eth.trailer",entry => entry.CarryingProto = "eth"},
            {entry => entry.CarryingProto == "wtap_file",entry => entry.CarryingProto = "wtap"},
            {entry => entry.CarryingProto == "infiniband.payload",entry => entry.CarryingProto = "infiniband"},
            {entry => entry.CarryingProto == "vines_spp",entry => entry.CarryingProto = "vines"},
            {entry => entry.CarryingProto == "atn-ulcs",entry => entry.CarryingProto = "ulcs"},
            {entry => entry.ProtoName == "fb_zero",entry => entry.SetCustomShortName("fb_zero")},
            {entry => entry.ProtoName == "h1",entry => entry.ProtoName = "hi"},
            {entry => entry.ProtoName == "rtitcp",entry => entry.SetCustomShortName("rtitcp")},
            {entry => entry.ProtoName == "u3v",entry => entry.SetCustomShortName("u3v")},
            {entry => entry.ProtoName.StartsWith("dvb-s2"),entry => entry.SetCustomShortName("dvb_s2_udp")},
            {entry => entry.ProtoName == "norm",entry => entry.SetCustomShortName("rmt_norm_udp")},
            {entry => entry.ProtoName == "quic",entry => entry.SetCustomShortName("quic")},
            {entry => entry.ProtoName == "gquic",entry => entry.SetCustomShortName("gquic")},
            {entry => entry.ProtoName == "rftap",entry => entry.SetCustomShortName("rftap")},
            {entry => entry.ProtoName == "f5fileinfo",entry => entry.SetCustomShortName("f5fileinfo")},
            {entry => entry.ProtoName == "f5ethtrailer",entry => entry.SetCustomShortName("f5ethtrailer")},
            {entry => entry.ProtoName.StartsWith("image-"),entry => entry.ProtoName = entry.ProtoName.Replace("image-","")},
            {entry => entry.ProtoName.StartsWith("file-"),entry => entry.ProtoName = entry.ProtoName.Replace("file-","")},
            // ReSharper restore StringLiteralTypo
        };

        public static string GetActualName(TSharkHeuristicProtocolEntry misalignedEntry)
        {
            // Get list without punctuation (or create if not yet created)
            if (_noPuncHeurDict == null)
                _noPuncHeurDict = WiresharkHeuristics.List.ToDictionary(RemovePunct);

            // Try to apply fixes for all known pitfalls
            foreach (var mod in _knownCarryingPitfalls)
            {
                Predicate<TSharkHeuristicProtocolEntry> modifyCondition = mod.Key;
                Action<TSharkHeuristicProtocolEntry> modification = mod.Value;
                if (modifyCondition(misalignedEntry))
                {
                    modification(misalignedEntry);
                }
            }

            // Remove punctuation like dots, dashes, underscores before searching in list
            string name = misalignedEntry.ShortName;
            string normalizedNameKey = RemovePunct(name);
            string newName;
            if (_noPuncHeurDict.TryGetValue(normalizedNameKey, out newName))
            {
                return newName;
            }
            else
            {
                return null;
            }
        }


        private static string RemovePunct(string dissectorName)
        {
            return dissectorName.Replace(".", "").Replace("-", "").Replace("_", "");
        }
    }
}
